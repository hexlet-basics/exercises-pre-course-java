---

name: Параметры методов

theory: |

  Метод `length()` не требует никаких уточнений. Он всегда работает однозначно и извлекает полную длину строки.

  Но так бывает не всегда. Например, если мы хотим извлечь первый символ из строки, то нам нужно явно указать, что символ первый. Для этого в вызовы методов можно передавать параметры:

  ```java
  var searchEngine = "google";
  // Возвращает первый символ (тип char)
  searchEngine.charAt(0); // 'g'
  ```

  Почему символ первый, а указан 0? В программировании отсчет начинается с нуля. Поэтому первый символ находится на нулевой позиции — «индекс 0».

  Соответственно, у последнего символа индекс равен длине строки — 1:

  ```java
  // google length => 6
  searchEngine.charAt(5); // 'e'
  ```

  ## Несколько параметров

  Параметров может быть больше, чем один. Например, метод `replace()` работает с двумя, где первый — что заменить, а второй – на что:

  ```java
  searchEngine.replace("go", "mo"); // "moogle"
  ```

  ## Значения по умолчанию

  Параметры могут содержать значение по умолчанию там, где это значение используется чаще всего.

  Такая возможность в языках добавлена, чтобы избавить программиста от рутины. Простой пример – метод, извлекающий из строки подстроку, то есть часть строки.

  Этот метод принимает на вход:

  * Первым параметром индекс, с которого надо начать извлекать подстроку
  * Вторым параметром — индекс, до которого нужно извлекать символы

  По умолчанию берется строка до конца:

  ```java
  "hexlet".substring(1);    // "exlet"
  "hexlet".substring(1, 2); // "e"
  "hexlet".substring(1, 3); // "ex"
  "hexlet".substring(3, 6); // "let"
  ```


instructions: |

  Вам даны три переменные с фамилиями разных людей. Составьте и выведите на экран слово из символов в таком порядке:

  1. третий символ из первой строки;
  2. второй символ из второй строки;
  3. четвертый символ из третьей строки;
  4. пятый символ из второй строки;
  5. третий символ из второй строки.

  Символы в слове должны быть разделены пробелами. Вывод результата должен быть примерно в таком виде:

  <pre class='hexlet-basics-output'>
  a b c d e
  </pre>

# tips: []

# definitions:
#   - name: Метод
#     description: "операция, способная принимать данные и возвращать результат; Метод вызывается так: `foo()`."
#   - name: Аргумент
#     description: "информация, которую метод получает при вызове. Например, `foo(42)` — передача аргумента `42` методу `foo`"
